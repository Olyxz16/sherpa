// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findUser = `-- name: FindUser :one
SELECT id, username, masterkey, b64salt, b64filekey FROM "User"
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, findUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Masterkey,
		&i.B64salt,
		&i.B64filekey,
	)
	return i, err
}

const persistUser = `-- name: PersistUser :exec
INSERT INTO "User" (
    id, username, masterkey, b64salt, b64filekey
) VALUES (
    $1, $2, $3, $4, $5
)
ON CONFLICT (id)
DO UPDATE SET
    username = EXCLUDED.username,
    masterkey = EXCLUDED.masterkey,
    b64salt = EXCLUDED.b64salt,
    b64filekey = EXCLUDED.b64filekey
`

type PersistUserParams struct {
	ID         int32
	Username   string
	Masterkey  pgtype.Text
	B64salt    pgtype.Text
	B64filekey pgtype.Text
}

func (q *Queries) PersistUser(ctx context.Context, arg PersistUserParams) error {
	_, err := q.db.Exec(ctx, persistUser,
		arg.ID,
		arg.Username,
		arg.Masterkey,
		arg.B64salt,
		arg.B64filekey,
	)
	return err
}

const updateMasterkey = `-- name: UpdateMasterkey :exec
UPDATE "User"
SET masterkey=$2,
b64salt=$3,
b64filekey=$4
WHERE id=$1
`

type UpdateMasterkeyParams struct {
	ID         int32
	Masterkey  pgtype.Text
	B64salt    pgtype.Text
	B64filekey pgtype.Text
}

func (q *Queries) UpdateMasterkey(ctx context.Context, arg UpdateMasterkeyParams) error {
	_, err := q.db.Exec(ctx, updateMasterkey,
		arg.ID,
		arg.Masterkey,
		arg.B64salt,
		arg.B64filekey,
	)
	return err
}
