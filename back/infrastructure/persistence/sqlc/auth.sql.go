// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findAuthById = `-- name: FindAuthById :one
SELECT a.uid, userid, source, access_token, expires_in, refresh_token, rt_expires_in, u.uid, username, masterkey, b64salt, b64filekey FROM Auth a
JOIN UserData u on u.uid = a.userId
WHERE a.uid = $1
LIMIT 1
`

type FindAuthByIdRow struct {
	Uid          int32
	Userid       int32
	Source       pgtype.Text
	AccessToken  pgtype.Text
	ExpiresIn    pgtype.Float8
	RefreshToken pgtype.Text
	RtExpiresIn  pgtype.Float8
	Uid_2        int32
	Username     string
	Masterkey    pgtype.Text
	B64salt      pgtype.Text
	B64filekey   pgtype.Text
}

func (q *Queries) FindAuthById(ctx context.Context, uid int32) (FindAuthByIdRow, error) {
	row := q.db.QueryRow(ctx, findAuthById, uid)
	var i FindAuthByIdRow
	err := row.Scan(
		&i.Uid,
		&i.Userid,
		&i.Source,
		&i.AccessToken,
		&i.ExpiresIn,
		&i.RefreshToken,
		&i.RtExpiresIn,
		&i.Uid_2,
		&i.Username,
		&i.Masterkey,
		&i.B64salt,
		&i.B64filekey,
	)
	return i, err
}

const findAuthByUserId = `-- name: FindAuthByUserId :one
SELECT uid, userid, source, access_token, expires_in, refresh_token, rt_expires_in FROM Auth
WHERE userId = $1 AND source = $2
LIMIT 1
`

type FindAuthByUserIdParams struct {
	Userid int32
	Source pgtype.Text
}

func (q *Queries) FindAuthByUserId(ctx context.Context, arg FindAuthByUserIdParams) (Auth, error) {
	row := q.db.QueryRow(ctx, findAuthByUserId, arg.Userid, arg.Source)
	var i Auth
	err := row.Scan(
		&i.Uid,
		&i.Userid,
		&i.Source,
		&i.AccessToken,
		&i.ExpiresIn,
		&i.RefreshToken,
		&i.RtExpiresIn,
	)
	return i, err
}

const persistAuth = `-- name: PersistAuth :exec
INSERT INTO Auth (
    uid, userId, source, access_token, expires_in, refresh_token, rt_expires_in
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
ON CONFLICT DO NOTHING
`

type PersistAuthParams struct {
	Uid          int32
	Userid       int32
	Source       pgtype.Text
	AccessToken  pgtype.Text
	ExpiresIn    pgtype.Float8
	RefreshToken pgtype.Text
	RtExpiresIn  pgtype.Float8
}

func (q *Queries) PersistAuth(ctx context.Context, arg PersistAuthParams) error {
	_, err := q.db.Exec(ctx, persistAuth,
		arg.Uid,
		arg.Userid,
		arg.Source,
		arg.AccessToken,
		arg.ExpiresIn,
		arg.RefreshToken,
		arg.RtExpiresIn,
	)
	return err
}
